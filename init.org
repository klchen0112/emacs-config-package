:PROPERTIES:
:header-args:emacs-lisp: :tangle init.el
:END:
#+TITLE: GNU Emacs Configuration
#+AUTHOR: Terje Larsen

* Overview
Terje's GNU Emacs configuration.

This configuration is making a lot of assumptions as it is built as a package with [[https://nix.dev][Nix]]. This means that all
packages are expected to be on the =load-path= already and compatibility is only guaranteed with the GNU Emacs
version that is part of this package. Currently GNU Emacs 31.0.50.

The rough details:
- themes :: [[file:lisp/readable-typo-theme.el][readable-typo-theme]] and [[file:lisp/readable-mono-theme.el][readable-mono-theme]]
  - fonts :: [[https://github.com/be5invis/Iosevka][Iosevka Curly Slab, Iosevka Aile, Iosevka Etoile]]
- buffer completion :: [[https://github.com/minad/corfu][corfu]], =completion-preview=
- minibuffer completion :: [[https://github.com/minad/vertico][vertico]]
- package configuration :: [[info:use-package#Top][use-package]]
- key definitions :: =keymap=, =repeat=
- code navigation :: [[info:emacs#Xref][xref]], [[https://github.com/jacktasia/dumb-jump][dumb-jump]], [[https://github.com/vspinu/imenu-anywhere][imenu-anywhere]]
- syntax checker :: [[info:flymake#Top][flymake]]
- persistence :: =desktop=
- language server integration :: [[info:eglot#Top][eglot]]
- structured editing :: [[https://github.com/AmaiKinono/puni][puni]]

Nix:
- Package management via [[https://github.com/emacs-twist/twist.nix][twist.nix]]
- GNU Emacs via [[https://github.com/nix-community/emacs-overlay][emacs-overlay]]

** Screenshots
*** org-mode
#+CAPTION: org-mode light
[[./media/org-mode-light.png]]

#+CAPTION: org-mode dark
[[./media/org-mode-dark.png]]

*** markdown-mode
#+CAPTION: markdown-mode light
[[./media/markdown-mode-light.png]]

#+CAPTION: markdown-mode dark
[[./media/markdown-mode-dark.png]]

*** emacs-lisp-mode
#+CAPTION: emacs-lisp-mode light
[[./media/emacs-lisp-mode-light.png]]

#+CAPTION: emacs-lisp-mode dark
[[./media/emacs-lisp-mode-dark.png]]
* Early initialization
:PROPERTIES:
:header-args:emacs-lisp: :tangle early-init.el
:END:

#+begin_src emacs-lisp :tangle early-init.el
;;; early-init.el --- Early Initialization -*- lexical-binding: t; -*-
#+end_src

** Debug
Provide an easy way to toggle debug mode which will set certain variables to produce more
informative output. It can be set either by providing the environment variable =DEBUG= or
start Emacs with =--debug-init=.
#+begin_src emacs-lisp :tangle early-init.el
(when (getenv "DEBUG") (setq init-file-debug t))
(setq debug-on-error (and (not noninteractive) init-file-debug))
#+end_src

** Startup

Temporarily reduce garbage collection to gain some performance boost during startup.
#+begin_src emacs-lisp :tangle early-init.el
(let ((normal-gc-cons-threshold gc-cons-threshold)
      (normal-gc-cons-percentage gc-cons-percentage)
      (normal-file-name-handler-alist file-name-handler-alist)
      (init-gc-cons-threshold most-positive-fixnum)
      (init-gc-cons-percentage 0.6))
  (setq gc-cons-threshold init-gc-cons-threshold
        gc-cons-percentage init-gc-cons-percentage
        file-name-handler-alist nil)
  (add-hook 'after-init-hook
            `(lambda ()
               (setq gc-cons-threshold ,normal-gc-cons-threshold
                     gc-cons-percentage ,normal-gc-cons-percentage
                     file-name-handler-alist ',normal-file-name-handler-alist))))
#+end_src

Inhibit startup screen and messages. If you are new to Emacs it is recommended to not
disable the startup screen as it has great content to get you going.
#+begin_src emacs-lisp :tangle early-init.el
(setq inhibit-startup-echo-area-message t)
(setq inhibit-startup-screen t)
(setq initial-scratch-message nil)
#+end_src

Performance tweaks.  Don't load default library and use =fundamental-mode= to reduce amount
of hooks.
#+begin_src emacs-lisp :tangle early-init.el
(setq inhibit-default-init t)
(setq initial-major-mode 'fundamental-mode)
#+end_src

Disable =package.el= support. Packages are managed via Nix and disabling this gives a slight
performance boost.
#+begin_src emacs-lisp :tangle early-init.el
(setq package-enable-at-startup nil)
(setq package-quickstart nil)
#+end_src

** UI
Disable GUI components.
#+begin_src emacs-lisp :tangle early-init.el
(setq use-dialog-box nil)
(push '(undecorated . t) default-frame-alist)
(push '(menu-bar-lines . 0) default-frame-alist)
(push '(tool-bar-lines . 0) default-frame-alist)
(push '(vertical-scroll-bars) default-frame-alist)
#+end_src

Don't implicitly resize frames when changing various settings.
#+begin_src emacs-lisp :tangle early-init.el
(setq frame-inhibit-implied-resize t)
(defvar global-text-scale-adjust-resizes-frames t)
#+end_src

Allow resizing by dragging internal border.
#+begin_src emacs-lisp :tangle early-init.el
(push '(drag-internal-border . t) default-frame-alist)
#+end_src

Ignore X resources.
#+begin_src emacs-lisp :tangle early-init.el
(advice-add #'x-apply-session-resources :override #'ignore)
#+end_src
* Initialization

#+begin_src emacs-lisp
;;; init.el --- Initialization -*- lexical-binding: t; -*-
#+end_src

** PaChoose a snippet: ckage configuration
*** Setup
:PROPERTIES:
:SORTING_TYPE: a
:END:

#+begin_src emacs-lisp
(eval-when-compile
    (require 'setup)
    (require 'cl-lib)

    ;; Exactly the same definition as a snippet available at
    ;; https://www.emacswiki.org/emacs/SetupEl#h5o-4 but renamed
    (defmacro define-setup-macro (name signature &rest body)
      "Shorthand for `setup-define'.
    NAME is the name of the local macro.  SIGNATURE is used as the
    argument list for FN.  If BODY starts with a string, use this as
    the value for :documentation.  Any following keywords are passed
    as OPTS to `setup-define'."
      (declare (debug defun))
      (let (opts)
        (when (stringp (car body))
          (setq opts (nconc (list :documentation (pop body))
                            opts)))
        (while (keywordp (car body))
          (let* ((prop (pop body))
                 (val `',(pop body)))
            (setq opts (nconc (list prop val) opts))))
        `(setup-define ,name
           (cl-function (lambda ,signature ,@body))
           ,@opts)))

    (define-setup-macro :package (package)
      "Fake installation of PACKAGE."
      :repeatable t
      :shorthand cadr))
#+end_src
*** :defer

#+begin_src emacs-lisp
(eval-when-compile
  (define-setup-macro :defer (seconds &optional func)
    "Call a function at N seconds after init."
    `(add-hook 'after-init-hook
               (lambda ()
                 (run-with-timer ,seconds nil
                                 ,(or func (setup-get 'hook)))))))
#+end_src
*** :reformatters
#+begin_src emacs-lisp
  (eval-when-compile
    (define-setup-macro
     :reformatters (&rest entries)
     "Define reformatters."
     (let ((feature (setup-get 'feature)))
       (macroexp-progn
        (mapcar (pcase-lambda (`(,name . ,args))
                  `(reformatter-define ,name ,@args))
                entries)))))
#+end_src
*** :load-after
#+begin_src emacs-lisp
(eval-when-compile
  (setup-define :load-after
                (lambda (&rest features)
                  (let ((body `(require ',(setup-get 'feature))))
                    (dolist (feature (nreverse features))
                      (setq body `(with-eval-after-load ',feature ,body)))
                    body))
                :documentation "Load the current feature after FEATURES."))
#+end_src
*** :set
#+begin_src emacs-lisp
(eval-when-compile
    (define-setup-macro
     :set (&rest args)
     "Set the default values of variables."
     `(setq-default ,@args)))

#+end_src
*** :keymap-unset
#+begin_src emacs-lisp
  (eval-when-compile
    (define-setup-macro
     :keymap-unset (key)
     "Use `keymap-unset' to define keybindings."
     :after-loaded t
     :repeatable t
     `(keymap-unset ,(setup-get 'map) ,key)))
#+end_src
*** :mode-repl
#+begin_src emacs-lisp
  (eval-when-compile
    (define-setup-macro :mode-repl (repl-fn)
      "Add an entry to `rtog/mode-repl-alist'."
      `(progn
         (with-eval-after-load 'repl-toggle
           (push (cons ',(setup-get 'mode) ',repl-fn)
                 rtog/mode-repl-alist))
         (add-hook ',(setup-get 'hook)
                   #'repl-toggle-mode))))
#+end_src
*** :nixpkgs
#+begin_src emacs-lisp :yes
  (eval-when-compile
    (define-setup-macro :nixpkgs (&rest nixpkgs)
      "Fake installation of packages from NIXPKGS for executables."))
#+end_src
** Data
Provide a location where Emacs can store data and cache.
#+begin_src emacs-lisp
(setup constants
       (defvar data-dir
         (if (getenv "XDG_DATA_HOME")
             (concat (getenv "XDG_DATA_HOME") "/emacs/")
           (expand-file-name "~/.local/share/emacs/"))
         "Directory for data.")

       (defvar cache-dir
         (if (getenv "XDG_CACHE_HOME")
             (concat (getenv "XDG_CACHE_HOME") "/emacs/")
           (expand-file-name "~/.cache/emacs/"))
         "Directory for cache.")

       (defvar pictures-dir
         (or (getenv "XDG_PICTURES_DIR")
             (expand-file-name "~/Pictures/"))
         "Directory for pictures.")
       )
#+end_src

*** Customization
Put custom definitions in a temporary file so it doesn't grow over time. This means all
customization will disappear upon reboot and instead needs to be managed via the
initialization file.
#+begin_src emacs-lisp
(setup custom-file
   (setq custom-file (expand-file-name "custom.el" temporary-file-directory))
)
#+end_src

** Performance
No second pass of case-insensitive search over =auto-mode-alist=.
#+begin_src emacs-lisp
(setup auto-mode-case-fold
(setq auto-mode-case-fold nil)
)
#+end_src

Give up some bidirectional functionality for slightly faster re-display.
#+begin_src emacs-lisp
(setup bidirectional
       (setq bidi-inhibit-bpa t)
       (setq-default bidi-display-reordering 'left-to-right
                     bidi-paragraph-direction 'left-to-right)
       )
#+end_src

Defer processing font faces while scrolling and typing.
#+begin_src emacs-lisp
(setup jit
(setq fast-but-imprecise-scrolling t)
(setq jit-lock-defer-time 0)
)
#+end_src

*** gcmh
Adjust Garbage Collector threshold depending on activity and try to run garbage collection
during idle instead.
#+begin_src emacs-lisp
(setup gcmh
       (:package gcmh)
       (:hook-into after-init-hook)
       (:set
        gcmh-idle-delay 5
        gcmh-high-cons-threshold (* 16 1024 1024) ; 16MB
        gcmh-verbose init-file-debug))
#+end_src


*** benchmark-init
#+begin_src emacs-lisp
  (setup benchmark-init
         (:package benchmark-init)
         (:require benchmark-init)
         (:only-if init-file-debug
  		 (add-hook 'after-init-hook 'benchmark-init/deactivate))
         )
#+end_src

** Libraries
*** nerd-icons
Library for displaying icons. I am trying to use icons where possible.
#+begin_src emacs-lisp
(setup nerd-icons
       (:package nerd-icons))
#+end_src
*** Treesit
#+begin_src emacs-lisp
  (setup treesit
         (:only-if (fboundp 'treesit-available-p))
         )

#+end_src
** Functions
** Localization
#+begin_src emacs-lisp
(setup localization
       (:set calendar-week-start-day 1)
       )
#+end_src

** Shell
Set shell to bash as fish is not compatible with all packages using the shell.
#+begin_src emacs-lisp
(setup shell
(:set shell-file-name "bash")
)
#+end_src

** Region
Fix WSL/WSLg copy issue.
#+begin_src emacs-lisp
(setq select-active-regions nil)
#+end_src

** UX
Disable bell (both visual and audible).
#+begin_src emacs-lisp
;; (setq ring-bell-function #'ignore)
;; (setq visible-bell nil)
#+end_src

Use =y= / =n= instead of =yes= / =no.=
#+begin_src emacs-lisp
;; (setq confirm-kill-emacs #'y-or-n-p)
;; (fset #'yes-or-no-p #'y-or-n-p)
#+end_src

Hide M-x commands which does not work in the current buffer.
#+begin_src emacs-lisp
;; (setq read-extended-command-predicate #'command-completion-default-include-p)
#+end_src

* Appearance
** Fonts
*** Size
#+begin_src emacs-lisp
;; (defvar init-line-spacing 0.25
;;   "Spacing between lines.")

;; (defvar init-default-font-height 105
;;   "Default font height.")
#+end_src

*** Face
#+begin_src emacs-lisp
;; (defvar init-fixed-pitch-font "Iosevka Curly Slab"
;;   "Font used for fixed-pitch faces.")

;; (defvar init-variable-pitch-font "Iosevka Aile"
;;   "Font used for variable-pitch faces.")

;; (defvar init-serif-font "Iosevka Etoile"
;;   "Font used for serif faces.")

;; (defvar init-unicode-font "Noto Sans Mono"
;;   "Fallback font used for unicode glyphs.")

;; (defvar init-symbol-fonts '("Apple Symobols" "Apple Color Emoji" "Noto Color Emoji" "Liberation Mono" "Noto Sans Symbols2" "SegoUI Emoji" "FreeSerif" "Symbola" "Twitter")
  ;; "Fonts used for symbol/emoji faces.")
#+end_src

Setup symbol fonts.
#+begin_src emacs-lisp
;; (dolist (font init-symbol-fonts)
  ;; (set-fontset-font t 'symbol font nil 'append))
#+end_src

*** Line length
#+begin_src emacs-lisp
;; (setq-default fill-column 110)
#+end_src

*** Underline
Underline line at descent position, not baseline position.
#+begin_src emacs-lisp
;; (setq x-underline-at-descent-line t)
#+end_src

** Theme
Use a bar cursor by default.
#+begin_src emacs-lisp
;; (setq-default cursor-type 'bar)
#+end_src
*** ef-themes
#+begin_src emacs-lisp
  (setup ef-themes
         (:package ef-themes)
         (:set
  	ef-themes-take-over-modus-themes-mode 1
  	modus-themes-mixed-fonts t
  	modus-themes-italic-constructs t
  	modus-themes-disable-other-themes t)
         (require 'ef-themes)
         (modus-themes-load-random)
         )
#+end_src

** Layout
*** Frame
See [[info:elisp#Frame Layout][Frame Layout]] for details and terminology.
- Add some padding around the whole window (=internal-border-width=) to provide some air.
#+begin_src emacs-lisp
;; (cl-pushnew '(internal-border-width . 16) default-frame-alist :test #'equal)
#+end_src

*** Fringe
Setup fringes on both sides and display an indicator for buffer boundaries on the right
side. Display fringes outside margins to have the [[Padding][padding]] on the inside.
#+begin_src emacs-lisp
;; (setq-default fringes-outside-margins t
;;               left-fringe-width 8
;;               right-fringe-width 8
;;               indicate-buffer-boundaries 'right)
#+end_src

*** Padding
Add margins inside windows to make text feel less crowded. Padding around the frame is
configured via the =internal-border-width= in the [[Frame][Frame]] section.
#+begin_src emacs-lisp
;; (setq-default left-margin-width 1
              ;; right-margin-width 1)
#+end_src

** Modeline
#+begin_src emacs-lisp
  (setup dashboard
         (:package dashboard)
         (:set  dashboard-icon-type 'nerd-icons)
         (dashboard-setup-startup-hook)
         )

#+end_src

** Dashboard
#+begin_src emacs-lisp
  (setup doom-modeline
         (:package doom-modeline)
         (:hook-into after-init-hook)
         (:hook size-indication-mode)
         (:hook column-number-mode)
         )

#+end_src
** display-line-number
#+begin_src emacs-lisp
  (setup display-fill-column-indicator (:hook-into prog-mode))
  (setup display-line-numbers (:hook-into prog-mode)
         (:set display-line-numbers-width 2
  	     display-line-numbers-type 'relative))
#+end_src

** Scroll
#+begin_src emacs-lisp

  (setup pixel-scroll
         (:only-if  (version<= "29" emacs-version)
  		  (:with-mode pixel-scroll-precision-mode
  			      ;; TODO: Find a better way to hook the minor mode
  			      (:hook-into find-file-hook
  					  help-mode-hook))))
#+end_src

* Editor & Keybindings
** Editor Config
#+begin_src emacs-lisp
(setup editorconfig)
#+end_src
** Meow with treesitter

#+begin_src emacs-lisp
  (setup meow
         (:package meow)
         (:also-load lib-meow)
         (:with-function meow-setup (:autoload-this))
         (meow-global-mode 1)
         (meow-setup)
         )
 (setup lib-meow
        (:package lib-meow))

  (setup meow-tree-sitter
         (:package meow-tree-sitter)
         (:load-after meow)
         (:when-loaded (meow-tree-sitter-register-defaults)
         )
        )
#+end_src
** Keybiding
*** Which-key
#+begin_src emacs-lisp
(setup which-key
       (:package which-key)
       (:hook-into after-init-hook)
       (:set which-key-idle-delay 0.3)
       )

#+end_src
** Undo
Increase undo limit.
#+begin_src emacs-lisp
(setup undo-fu
       (:package undo-fu)
       (:set undo-limit 1000000
             undo-strong-limit (* 2 undo-limit))
       )
#+end_src

** Synatax & Checker
* Completion
Enable indentation and completion with the =TAB= key.
#+begin_src emacs-lisp
;; (setq tab-always-indent 'complete)
#+end_src

Cycle with the =TAB= key if there are only few candidates.
#+begin_src emacs-lisp
;; (setq completion-cycle-threshold 3)
#+end_src


** Style
*** orderless
Space-separated matching components matching in any order.
#+begin_src emacs-lisp
(setup orderless
       (:package orderless)
       (:set
        completion-styles '(substring orderless)
        completion-category-defaults nil
        completion-category-overrides '((file (styles partial-completion)))))
#+end_src

** Buffer
*** corfu
Completion Overlay Region FUnction.
#+begin_src emacs-lisp

(setup corfu
       (:package corfu)
       (:with-mode global-corfu-mode
  		   (:hook-into after-init-hook))
       ;; load features
       (:also-load nerd-icons-corfu)
       (:with-feature corfu-popupinfo
  		      (:set corfu-popupinfo-delay '(0.5 . 1.0))
  		      (:hook-into corfu-mode-hook))
       (:with-feature corfu-history
  		      (:hook-into corfu-mode-hook)
  		      )
       (:set
  	corfu-auto t
  	corfu-atuo-refix 2
  	corfu-cycle t
  	corfu-preselect 'prompt
  	corfu-count 16
  	corfu-max-width 120
  	corfu-on-exact-match nil
  	corfu-quit-at-boundary     'separator
  	tab-always-indent 'complete))

(setup nerd-icons-corfu
       (:package nerd-icons-corfu)
       (:also-load nerd-icons)
       )


#+end_src

** Minibuffer
*** vertico
Vertical interactive completion UI.
#+begin_src emacs-lisp
  (setup vertico
         (:package vertico)
         (:also-load orderless)
         (:also-load marginalia)
         (:hook-into after-init-hook)
         (:set vertico-cycle t)
         )


#+end_src

** snippets
#+begin_src emacs-lisp
(setup tempel
       (:package tempel)
       (:also-load tempel-collection)
       (:set tempel-trigger-prefix "<")
       ;; Setup completion at point
       (defun tempel-setup-capf ()
  	 ;; Add the Tempel Capf to `completion-at-point-functions'.
  	 ;; `tempel-expand' only triggers on exact matches. Alternatively use
  	 ;; `tempel-complete' if you want to see all matches, but then you
  	 ;; should also configure `tempel-trigger-prefix', such that Tempel
  	 ;; does not trigger too often when you don't expect it. NOTE: We add
  	 ;; `tempel-expand' *before* the main programming mode Capf, such
  	 ;; that it will be tried first.
  	 (setq-local completion-at-point-functions
  		     (cons #'tempel-expand
  			   completion-at-point-functions)))
       (add-hook 'conf-mode-hook 'tempel-setup-capf)
       (add-hook 'prog-mode-hook 'tempel-setup-capf)
       (add-hook 'text-mode-hook 'tempel-setup-capf)
       )

(setup tempel-collection
       (:package tempel-collection)
       )

#+end_src
** Extensions

*** nerd-icons-completion
#+begin_src emacs-lisp
(setup nerd-icons-completion
       (:package nerd-icons-completion)
       (:also-load nerd-icons)
       (:when-loaded
  	(add-hook 'marginalia-mode-hook #'nerd-icons-completion-marginalia-setup))
       )

#+end_src

*** cape
Completion At Point Extensions.
#+begin_src emacs-lisp
(setup cape
       (:package cape)
       (:when-loaded
       (add-hook 'completion-at-point-functions #'cape-dabbrev)
       (add-hook 'completion-at-point-functions #'cape-file)
       (add-hook 'completion-at-point-functions #'cape-elisp-block)
       )
       )
#+end_src

*** consult
Commands compatible with ~completing-read~.
#+begin_src emacs-lisp
(setup consult
       (:package consult)
       (:set consult-preview-key "M-RET"))

(setup consult-xref
(:when-loaded
       (setq xref-show-xrefs-function #'consult-xref
        xref-show-definitions-function #'consult-xref))
       (:load-after consult xref)
       )
#+end_src
*** embark
#+begin_src emacs-lisp
  (setup embark
         (:package embark))
  (setup embark-consult
         (:package embark-consult)
         (:load-after embark consult)
         (:with-mode embark-collect-mode
  		   (:hook consult-preview-at-point-mode))
         )
#+end_src


*** dabbrev
#+begin_src emacs-lisp
(setup dabbrev
       (:set
        dabbrev-case-replace nil
        dabbrev-ignored-buffer-regexps '("\\.\\(?:pdf\\|jpe?g\\|png\\)\\'")))
#+end_src


*** marginalia
Annotations for completion candidates.
#+begin_src emacs-lisp
  (setup marginalia
         (:package marginalia)
         (:also-load nerd-icons-completion)
         (:hook-into after-init-hook))
#+end_src

* Navigation

** Dired
#+begin_src emacs-lisp


(setup dirvish
  (:load-after dired)
       (:package dirvish)
       )

(setup diredfl
        (:load-after dired)
       (:package diredfl)
       )

#+end_src

*** Icons
#+begin_src emacs-lisp

  (setup nerd-icons-dired
    (:package nerd-icons-dired)
    (:load-after dired)
         (:hook-into dired-mode-hook))

#+end_src

*** Git
#+begin_src emacs-lisp :tangle no
(use-package dired-git-info
  :ensure t
  :bind
  (:map dired-mode-map (")" . dired-git-info-mode)))
#+end_src

** Isearch
#+begin_src emacs-lisp
(setup isearch
       (:set isearch-lazy-count t))
#+end_src

** Occur
#+begin_src emacs-lisp
(setup replace)

(setup noccur)
#+end_src



** Project
#+begin_src emacs-lisp
  (setup projectile
         (:package projectile)
         (projectile-mode +1)
         )

#+end_src

* Development
Reduce scroll margin.
#+begin_src emacs-lisp
(defun prog-scroll-margin-setup ()
  "Setup `scroll-margin' for `prog-mode'."
  (setq-local scroll-margin 3))
(add-hook 'prog-mode-hook #'prog-scroll-margin-setup)
#+end_src

** Compilation
#+begin_src emacs-lisp
#+end_src

** Containers
*** Docker
#+begin_src emacs-lisp
(setup docker
       (:package docker))
#+end_src

**** Files
Support for Docker related files.
#+begin_src emacs-lisp
(setup dockerfile-ts-mode
  (:match-file
  "Dockerfile\\'"
  "\\.dockerfile\\'")
#+end_src

*** Kubernetes
#+begin_src emacs-lisp
(setup kubernetes (:package kubernetes))
#+end_src

** Coverage
#+begin_src emacs-lisp

#+end_src

** Docs
*** DevDocs
Lookup documentation via DevDocs.
#+begin_src emacs-lisp
(setup devdocs
       (:package devdocs))
#+end_src

** Folding
Code folding with treesit-fold
#+begin_src emacs-lisp
(setup treesit-fold
       (:only-if (fboundp 'treesit-available-p))
       (:package treesit-fold)
       )

#+end_src

** Formatting


#+begin_src emacs-lisp
(setup reformatter
       (:package reformatter)
    ;;   (:reformatters
  	;; If you use prettier, you need to install its executable separately.
  	;;(prettier
  	;; :program "prettier"
  	;; :args (list (concat "--plugin-search-dir="
    ;;                         (expand-file-name
    ;;                          (locate-dominating-file default-directory "package.json")))
    ;;                 "--stdin-filepath" (buffer-file-name)))
  	;;(treefmt
  	;; :program "treefmt"
  	;; :args (list "--stdin" (buffer-file-name)))

  	;;(yamlfmt
  	;; :program "yamlfmt"
  	;; :args (list "-"))

  	;;(jq-format
  	;; :program "jq"
  	;; :args (list "."))

  	;;(biome-format
  	;; :program
  	;; (cond
  	;;  ((executable-find "bunx")
  	;;   "bunx"))
  	;; :args (append (cond
  	;;		((executable-find "bunx")
  	;;		 nil))
    ;;                   (list "@biomejs/biome" "format" (buffer-file-name)
    ;;                         (concat "--stdin-file-path=" (buffer-file-name))))))
    )

#+end_src

** REPL

*** repl-toggle
#+begin_src emacs-lisp
(setup repl-toggle
       (:package repl-toggle)
  (:set rtog/goto-buffer-fun 'pop-to-buffer)
  (:set rtog/mode-repl-alist
        '((emacs-lisp-mode . ielm)
          (org-mode . ielm))))
#+end_src


** Syntax checker
Silence next/previous error, by default it produces a message every time.
#+begin_src emacs-lisp
(advice-add 'next-error :around #'quiet-function-advice)
(advice-add 'previous-error :around #'quiet-function-advice)
#+end_src

*** flymake
Connect flymake to =next-error-function= and add some navigation bindings. Disable the
legacy diagnostic functions as some of them have bugs and cause instability (mainly the
Haskell one).
#+begin_src emacs-lisp
(setup flymake
  (:package flymake)
  (:with-feature flymake-proc)
  )

#+end_src

** Version control
#+begin_src emacs-lisp
(setq vc-follow-symlinks t)
(setq vc-make-backup-files nil)
#+end_src

*** diff
#+begin_src emacs-lisp
(setup diff
  (:set diff-font-lock-prettify t))
#+end_src

*** diff-hl
Diff indicators in fringe
#+begin_src emacs-lisp
(setup diff-hl
       (:package diff-hl))
#+end_src

*** magit
Enhanced git related views and commands.
#+begin_src emacs-lisp
(setup magit
       (:package magit)
       )

;;(setup forge
;;      (:package forge))
#+end_src

** Env

#+begin_src emacs-lisp
;;(setup envrc
;;       (:package envrc)
;;       (:with-mode envrc-global-mode
;;                   (:hook-into after-init-hook))
;;       )
#+end_src
** LSP
*** eglot
Generic Language Server Protocol integration via ~eglot~.
#+begin_src emacs-lisp
(setup eglot
       (:package eglot)
       (:set
        eglot-autoshutdown t
        eglot-code-action-indications nil
        eglot-confirm-server-edits nil
        eglot-sync-connect nil)
       )
)

;;(setup consult-eglot
;;       (:package consult-eglot)
;;       (:load-after eglot)
;;    (:with-feature consult-eglot-embark
;;         (consult-eglot-embark-mode))
;;
;;       )

;;(setup eglot-booster

;;       (:package eglot-booster)
;;       (:set eglot-booster-io-only t)
;;       (:when-loaded (:hook-into eglot-mode-hook))
;;       )

#+end_src
** Debugger
**** Dape
#+begin_src emacs-lisp
  (setup dape
         (:package dape)
         (:set
  	dape-buffer-window-arrangement 'right
  	dape-inlay-hints t)
         (:when-loaded
  	(add-hook after-init-hook 'daep-breakpoint-load)
  	(add-hook kill-emasc-hook 'dape-breakpoint-save)
  	(add-hook dape-compile-hook  'kill-buffer)
  	))
#+end_src

* Appearance
*** Ligatures
#+begin_src emacs-lisp
;;(setup ligature
;;       (:package ligature)
;;       (:hook-into prog-mode-hook)
;;       (:set ligature-set-ligatures
;;             'prog-mode
;;             '("-<<" "-<" "-<-" "<--" "<---" "<<-" "<-" "->" "->>" "-->" "--->" "->-" ">-" ">>-" "<->" "<-->" "<--->" "<---->" "<!--"
;;               "=<<" "=<" "=<=" "<==" "<===" "<<=" "<=" "=>" "=>>" "==>" "===>" "=>=" ">=" ">>=" "<=>" "<==>" "<===>" "<====>" "<!---"
;;               "<------" "------>" "<=====>" "<~~" "<~" "~>" "~~>" "::" ":::" "\\/" "/\\" "==" "!=" "/=" "~=" "<>" "===" "!==" "=/=" "=!="
;;               ":=" ":-" ":+" "<*" "<*>" "*>" "<|" "<|>" "|>" "<." "<.>" ".>" "+:" "-:" "=:" "<******>" "(*" "*)" "++" "+++" "|-" "-|"
;;               "&&" "||")))

(setup prog-mode
  (:set prettify-symbols-unprettify-at-point t))
#+end_src

* Writing
** Org
#+begin_src emacs-lisp
  (setup org
  (:defer 5)
         (:package org)
         (:set org-directory "~/org")
         (:with-feature org-agenda
    		      (:set
    		       ;; 时间前导0
    		       org-agenda-time-leading-zero t
    		       ;; 默认显示区间
    		       org-agenda-span 6
    		       ;; agenda view 默认从周一开始显示
    		       org-agenda-start-on-weekday 1)
    		      )
         )

  (setup org-download
         (:package org-download)
         (:load-after org)
         (:set   org-download-method 'directory
    	       org-download-image-dir "~/Library/Mobile Documents/com~apple~CloudDocs/Documents/org-attach"
    	       org-download-heading-lvl 'nil)
         )

  (setup org-modern
         (:package org-modern)
         (:load-after org)
         (:hook-into org-mode-hook)
         (:set
    	;; Edit settings
    	org-auto-align-tags nil
    	org-tags-column 0
    	org-catch-invisible-edits 'show-and-error
    	org-special-ctrl-a/e t
    	org-insert-heading-respect-content nil

    	;; Org styling, hide markup etc.
    	org-hide-emphasis-markers t
    	org-pretty-entities t
    	org-agenda-tags-column 0
    	org-ellipsis "…")
         (:when-loaded
    	(modify-all-frames-parameters
    	 '((right-divider-width . 40)
    	   (internal-border-width . 40)))
    	(dolist (face '(window-divider
    			window-divider-first-pixel
    			window-divider-last-pixel))
    	  (face-spec-reset-face face)
    	  (set-face-foreground face (face-attribute 'default :background)))
    	(set-face-background 'fringe (face-attribute 'default :background))
    	))

  (setup org-modern-indent
    (:package org-modern-indent)
         (:hook-into org-mode-hook)
         (:load-after org))
  ;;(setup org-appear
  ;;       (:package org-appear)
  ;;       (:when-loaded (:hook-into org-mode-hook)))

#+end_src
** Org-roam
#+begin_src emacs-lisp

  (setup org-roam
         (:package org-roam)
         (:load-after org)
         (:set org-roam-directory (file-truename org-directory))
         (:when-loaded  (org-roam-db-autosync-mode)
  		      (setq org-id-link-to-org-use-id t)
  		      (setq org-roam-completion-everywhere t))
         )

  (setup org-roam-ui
  (:load-after org-roam)
         (:package org-roam-ui)
         (:load-after org-roam)
         (:when-loaded
  	(setq org-roam-ui-sync-theme t
                org-roam-ui-follow t
  	      org-roam-ui-update-on-save t
                org-roam-ui-open-on-start nil
  	      )
  	))

  (setup org-roam-timestamps
         (:package org-roam-timestamps)
         (:load-after org-roam)
         (:hook-into org-roam-mode-hook)
         (:set org-roam-timestamps-parent-file t))



  (setup org-transclusion
    (:load-after org-roam)
         (:package org-transclusion)
         (:hook-into org-roam-mode-hook) )

  (setup consult-org-roam
    (:load-after org-roam consult)
         (:package consult-org-roam)
         (:set
  	;; Use `ripgrep' for searching with `consult-org-roam-search'
  	consult-org-roam-grep-func #'consult-ripgrep
  	;; Configure a custom narrow key for `consult-buffer'
  	consult-org-roam-buffer-narrow-key ?r
  	;; Display org-roam buffers right after non-org-roam buffers
  	;; in consult-buffer (and not down at the bottom)
  	consult-org-roam-buffer-after-buffers t
  	)
)
#+end_src
*
* Major modes
:PROPERTIES:
:header-args:emacs-lisp: :tangle no
:END:

** emacs-lisp
#+begin_src emacs-lisp
(setup elisp-mode
       (:hook flymake-mode outline-minor-mode))
#+end_src


** outline
Display outlines in text like files or use it in conjunction with other major modes via ~outline-minor-mode~.
** clojure
#+begin_src emacs-lisp :tangle no
(use-package clojure-mode
  :ensure t
  :mode
  "\\.\\(clj\\|dtm\\|edn\\)\\'"
  "\\(?:build\\|profile\\)\\.boot\\'"
  ("\\.cljc\\'" . clojurec-mode)
  ("\\.cljs\\'" . clojurescript-mode)
  :config
  (cl-pushnew '("src/\\([^/]+\\)\\.clj\\'" "test/\\1_test.clj") find-sibling-rules :test #'equal)
  (cl-pushnew '("test/\\([^/]+\\)_test\\.clj\\'" "src/\\1.clj") find-sibling-rules :test #'equal))
#+end_src

*** Packages
**** cider
#+begin_src emacs-lisp :tangle no
(use-package cider
  :ensure t
  :commands
  (cider-current-repl
   cider-jack-in-clj)
  :hook
  (clojure-mode-hook . cider-mode)
  (cider-mode-hook . cider-auto-test-mode)
  :bind
  ((:map cider-mode-map
         ("C-. R" . cider-jack-in)
         ("C-. c" . cider-ns-refresh)
         ("C-. l" . cider-load-buffer)
         ("C-. t a" . cider-test-run-project-tests)
         ("C-. t n" . cider-test-run-ns-tests)
         ("C-. t t" . cider-test-run-test)
         ("C-. t w" . cider-auto-test-mode)))
  :init
  (setq cider-prompt-for-symbol nil)
  (setq cider-repl-display-help-banner nil)
  (setq cider-repl-history-file (concat data-dir "cider-history"))

  (with-eval-after-load 'popper
    (cl-pushnew 'cider-test-report-mode popper-reference-buffers :test #'equal))
  :config
  (defun clojure-repl ()
    "Open a Clojure REPL."
    (interactive)
    (if-let* ((repl-buffer (cider-current-repl)))
        (pop-to-buffer repl-buffer)
      (cider-jack-in-clj nil)))

  (with-eval-after-load 'repl-toggle
    (cl-pushnew '(clojure-mode . clojure-repl) rtog/mode-repl-alist :test #'equal)))
#+end_src

** cobol
#+begin_src emacs-lisp :tangle no
(use-package cobol-mode
  :ensure t
  :mode "\\.\\(cob\\|cbl\\|cpy\\)\\'")
#+end_src

** crystal
#+begin_src emacs-lisp :tangle no
(use-package crystal-mode
  :ensure t
  :mode "\\(?:\\.cr\\)\\'"
  :bind
  ((:map crystal-mode-map
         ("C-. t a" . crystal-spec-all)
         ("C-. t f" . crystal-spec-buffer)
         ("C-. t t" . crystal-spec-line))))
#+end_src

*** Packages
**** inf-crystal
#+begin_src emacs-lisp :tangle no
(use-package inf-crystal
  :ensure t
  :commands
  (inf-crystal)
  :hook
  (crystal-mode-hook . inf-crystal-minor-mode)
  :config
  (defun crystal-repl ()
    "Open a Crystal REPL."
    (inf-crystal inf-crystal-interpreter))

  (with-eval-after-load 'repl-toggle
    (cl-pushnew '(crystal-mode . crystal-repl) rtog/mode-repl-alist :test #'equal)))
#+end_src

** csv
#+begin_src emacs-lisp
(setup csv-mode
       (:package csv-mode)
       (:match-file "\\.[Cc][Ss][Vv]\\'")
       (:with-mode tsv-mode (:file-match "\\.tsv\\'"))
       (:set csv-separators '("," "\t" ";")))
#+end_src

** d2
#+begin_src emacs-lisp :tangle no
(use-package d2-mode
  :ensure t
  :mode "\\.d2\\'"
  :hook
  (d2-mode-hook . d2-mode-set-compile-command)
  (d2-mode-hook . compile-on-save-mode)
  :init
  (setq d2-flags '("--layout" "elk" "--sketch" "--theme" "1"))
  :config
  (defun d2-mode-set-compile-command ()
    "Configure compile command for d2-mode."
    (set (make-local-variable 'compile-command)
         (mapconcat #'shell-quote-argument (append (list d2-location buffer-file-name) d2-flags)
                    " "))))
#+end_src

** elixir
#+begin_src emacs-lisp :tangle no
(use-package elixir-ts-mode
  :mode
  "\\.elixir\\'"
  "\\.ex\\'"
  "\\.exs\\'"
  :hook
  (elixir-ts-mode-hook . eglot-ensure)
  :init
  (cl-pushnew '("lib/\\([^/]+\\)\\.ex\\'" "test/\\1_test.exs") find-sibling-rules :test #'equal)
  (cl-pushnew '("test/\\([^/]+\\)_test\\.exs\\'" "lib/\\1.ex") find-sibling-rules :test #'equal))

(cl-pushnew '(elixir-mode . elixir-ts-mode) major-mode-remap-alist :test #'equal)
#+end_src

** elm
Elm and elm-mode seems unmaintained at the moment, so I disable this.
#+begin_src emacs-lisp :tangle no
(use-package elm-mode
  :ensure t
  :mode "\\.elm\\'"
  :bind
  (:map elm-mode-map ("C-. t" . elm-test-project))
  :init
  (setq elm-format-on-save t)
  (setq elm-package-json "elm.json")
  (setq elm-tags-exclude-elm-stuff nil)
  (setq elm-tags-on-save t)
  :config
  (with-eval-after-load 'repl-toggle
    (cl-pushnew '(elm-mode . elm-repl-load) rtog/mode-repl-alist :test #'equal)))
#+end_src

** epub
*** Packages
**** nov
#+begin_src emacs-lisp :tangle no
(use-package nov
  :ensure t
  :mode
  ("\\.epub\\'" . nov-mode)
  :hook
  (nov-mode-hook . init-nov-delayed-render)
  (nov-mode-hook . hide-fringes-mode)
  :init
  (setq nov-save-place-file (concat data-dir "nov-places"))
  :config
  (defun init-nov-delayed-render ()
    (run-with-idle-timer 0.2 nil 'nov-render-document)))
#+end_src

** erlang
#+begin_src emacs-lisp :tangle no
(use-package erlang
  :ensure t
  :mode
  ("\\.\\(e\\|h\\|x\\|y\\)rl$" . erlang-mode)
  ("\\.escript" . erlang-mode)
  ("\\.app\\.src$" . erlang-mode)
  ("/ebin/.+\\.app" . erlang-mode)
  :hook
  (erlang-mode-hook . init-erlang-eunit)
  (erlang-mode-hook . init-erlang-flymake)
  :bind
  (:map erlang-mode-map ("M-g k" . erlang-man-function))
  :init
  (cl-pushnew '("src/\\([^/]+\\)\\.erl\\'" "test/\\1_tests.erl") find-sibling-rules :test #'equal)
  (cl-pushnew '("test/\\([^/]+\\)_tests\\.erl\\'" "src/\\1.erl") find-sibling-rules :test #'equal)
  :config
  (defun init-erlang-eunit ()
    "Setup EUnit support for `erlang-mode'."
    (require 'erlang-eunit))

  (defun init-erlang-flymake ()
    "Setup `flymake' support for `erlang-mode'."
    (require 'erlang-flymake)
    (flymake-mode 1))

  (with-eval-after-load 'repl-toggle
    (cl-pushnew '(erlang-mode . erlang-shell-display) rtog/mode-repl-alist :test #'equal)))

(use-package erlang-eunit
  :bind
  (:map erlang-mode-map
        ("C-. t t" . erlang-eunit-compile-and-run-current-test)
        ("C-. t m" . erlang-eunit-compile-and-run-module-tests)))
#+end_src

** git
*** Packages
**** git-modes
#+begin_src emacs-lisp :tangle no
(use-package git-modes
  :ensure t
  :mode
  ("/\\.dockerignore\\'" . gitignore-mode))
#+end_src

** go
#+begin_src emacs-lisp :tangle no
(use-package go-ts-mode
  :mode
  "\\.go\\'"
  ("go\\.mod\\'" . go-mod-ts-mode)
  :hook
  (go-ts-mode-hook . eglot-ensure)
  (go-ts-mode-hook . go-ts-mode-set-devdocs)
  :preface
  (define-repl go-repl "Go REPL" "gore")
  :config
  (defun go-ts-mode-set-devdocs ()
    (setq-local devdocs-current-docs '("go")))

  (cl-pushnew '(go-mode . go-ts-mode) major-mode-remap-alist :test #'equal)

  (with-eval-after-load 'apheleia
    (cl-pushnew '(go-ts-mode . goimports) apheleia-mode-alist :test #'equal))

  (with-eval-after-load 'repl-toggle
    (cl-pushnew '(go-ts-mode . go-repl) rtog/mode-repl-alist :test #'equal))

  (cl-pushnew '("\\([^/]+\\)\\.go\\'" "\\1_test.go") find-sibling-rules :test #'equal)
  (cl-pushnew '("\\([^/]+\\)_test\\.go\\'" "\\1.go") find-sibling-rules :test #'equal))
#+end_src

*** Packages
**** gotest
#+begin_src emacs-lisp :tangle no
(use-package gotest
  :ensure t
  :bind
  (:map go-ts-mode-map
        ("C-. l" . go-run)
        ("C-. t a" . go-test-current-project)
        ("C-. t f" . go-test-current-file)
        ("C-. t t" . go-test-current-test)))
#+end_src

** groovy
#+begin_src emacs-lisp :tangle no
(use-package groovy-mode
  :ensure t
  :mode
  "\\.g\\(?:ant\\|roovy\\|radle\\)\\'"
  "Jenkinsfile")
#+end_src

** fish
#+begin_src emacs-lisp :tangle no
(use-package fish-mode
  :ensure t
  :mode
  "\\.fish\\'"
  "/fish_funced\\..*\\'")
#+end_src

** haskell
#+begin_src emacs-lisp :tangle no
(use-package haskell-mode
  :ensure t
  :preface
  (eval-when-compile
    (require 'haskell-commands))
  :mode
  "\\.[gh]s\\'"
  "\\.hsig\\'"
  "\\.hsc\\'"
  ("\\.cabal\\'\\|/cabal\\.project\\|/\\.cabal/config\\'" . haskell-cabal-mode)
  ("\\.l[gh]s\\'" . haskell-literate-mode)
  :hook
  (haskell-mode-hook . eglot-ensure)
  :preface
  (autoload 'interactive-haskell-mode-map "haskell" nil t)
  :bind
  (:map haskell-mode-map
        ("C-. r" . haskell-interactive-switch)
        ("C-. R" . haskell-session-change-target))
  :init
  (setq haskell-font-lock-symbols t)
  (setq haskell-process-auto-import-loaded-modules t)
  (setq haskell-process-log t)
  (setq haskell-process-show-debug-tips nil)
  (setq haskell-process-use-presentation-mode t)
  (setq haskell-stylish-on-save t)
  (setq haskell-mode-stylish-haskell-path "brittany")

  ;; Allow configuring project local cabal repl commands.
  (put 'haskell-process-args-cabal-repl
       'safe-local-variable
       (lambda (x) (cl-every #'stringp x))))

(use-package haskell
  :hook
  (haskell-mode-hook . interactive-haskell-mode)
  :bind
  (:map interactive-haskell-mode-map ("M-." . nil)))
#+end_src

** java
#+begin_src emacs-lisp
(setup java-ts-mode)

(setup eglot-java
       (:package eglot-java)
       (:load-after eglot)
       (:hook-into java-base-mode-hook)
       )

#+end_src

*** Packages
**** gradle-mode
#+begin_src emacs-lisp
(setup gradle-mode
       (:package gradle-mode)
       (:hook-into java-base-mode-hook kotlin-mode-hook)
       (:set gradle-executable-path "gradle"))
#+end_src

** js
#+begin_src emacs-lisp :tangle no
(use-package js
  :mode
  ("\\.js[mx]?\\'" . js-ts-mode)
  ("\\.har\\'" . js-ts-mode)
  :hook
  (js-ts-mode-hook . eglot-ensure)
  :init
  (cl-pushnew '("\\([^/]+\\)\\.js\\'" "\\1.spec.js") find-sibling-rules :test #'equal)
  (cl-pushnew '("\\([^/]+\\).spec\\.js\\'" "\\1.js") find-sibling-rules :test #'equal))

(cl-pushnew '(js-mode . js-ts-mode) major-mode-remap-alist :test #'equal)
#+end_src

** json
#+begin_src emacs-lisp
(setup json-ts-mode
       (:match-file
        "\\(?:\\(?:\\.json\\|\\.jsonld\\|\\.babelrc\\|\\.bowerrc\\|composer\\.lock\\)\\'\\)")
       )

#+end_src

*** Packages
**** json-navigator
#+begin_src emacs-lisp
(setup json-navigator)
#+end_src

** kotlin
#+begin_src emacs-lisp
(setup kotlin-mode
       (:package kotlin-mode))
#+end_src

** lisp
#+begin_src emacs-lisp :tangle no
(use-package inf-lisp
  :init
  (setq inferior-lisp-program "sbcl"))
#+end_src

*** Packages
**** sly
#+begin_src emacs-lisp :tangle no
(use-package sly
  :ensure t
  :bind
  (:map sly-mode-map
        ("M-g k" . sly-describe-symbol)
        ("C-. o" . sly)))

(use-package sly-quicklisp :ensure t)
#+end_src

** lua
#+begin_src emacs-lisp
(setup lua-ts-mode
  (:match-file "\\.lua\\'")
)
#+end_src

** markdown
#+begin_src emacs-lisp
(setup markdown-mode
       (:package markdown-mode)
       (:file-match
        "\\.markdown\\'"
        "\\.md\\'")
       (:hook markdown-display-inline-images)
       (:set markdown-enable-wiki-links t)
       (:set markdown-fontify-code-blocks-natively t)
       (:set markdown-header-scaling t)
       (:set markdown-hide-markup t)
       (:set markdown-italic-underscore t)
       (:set markdown-blockquote-display-char '("┃" ">"))
       (:set markdown-list-item-bullets '("⏺" "▪"))
       (:set markdown-make-gfm-checkboxes-buttons t)
       (:set markdown-max-image-size '(1024 . 1024)))
#+end_src

*** Packages
**** markdown-toc
Generate Table of Contents.
#+begin_src emacs-lisp
(setup markdown-toc (:package markdown-toc))
#+end_src


** mermaid
#+begin_src emacs-lisp :tangle no
(use-package mermaid-mode
  :ensure t
  :mode "\\.\\(mmd|mermaid\\)\\'"
  :hook
  (mermaid-mode-hook . mermaid-mode-set-compile-command)
  (mermaid-mode-hook . compile-on-save-mode)
  :init
  (setq mermaid-flags "--backgroundColor transparent")
  :config
  (defun mermaid-mode-set-compile-command ()
    "Configure compile command for mermaid-mode."
    (set (make-local-variable 'compile-command)
         (concat (mapconcat #'shell-quote-argument
                            (list
                             mermaid-mmdc-location
                             "-i" buffer-file-name
                             "-o" (concat (file-name-sans-extension buffer-file-name) mermaid-output-format)) " ")
                 " "
                 mermaid-flags))))
#+end_src

** message
#+begin_src emacs-lisp :tangle no
(use-package message
  :init
  (setq message-expand-name-standard-ui t))
#+end_src

** nginx
#+begin_src emacs-lisp :tangle no
(use-package nginx-mode
  :ensure t
  :mode
  "/nginx/.+\\.conf\\'"
  "nginx\\.conf\\'")
#+end_src

** nix
#+begin_src emacs-lisp
(setup nix-ts-mode
       (:package nix-ts-mode)
  (:file-match "\\.nix\\'")
  (:hook eglot-mode-hook))
(setup nix-mode
       (:package nix-mode))
#+end_src

** nushell

#+begin_src emacs-lisp
(setup nushell-ts-mode
       (:package nushell-ts-mode)
       (:match-file "\\.nu\\'"))
#+end_src

** nxml
#+begin_src emacs-lisp :tangle no
(use-package nxml-mode
  :mode "\\.plist\\'"
  :init
  (setq nxml-slash-auto-complete-flag t))
#+end_src

** ocaml
#+begin_src emacs-lisp :tangle no
(use-package caml :ensure t)

(use-package tuareg
  :ensure t
  :bind
  ((:map tuareg-mode-map
         ("C-x C-e" . tuareg-eval-phrase)
         ("C-. r" . run-ocaml))))
#+end_src

** pdf
*** Packages
**** pdf-tools
#+begin_src emacs-lisp :tangle no
(use-package pdf-tools
  :ensure t
  :mode ("\\.pdf\\'" . pdf-view-mode))
#+end_src

** plantuml
#+begin_src emacs-lisp :tangle no
(use-package plantuml-mode
  :ensure t
  :mode "\\.\\(plantuml\\|pum\\|plu\\)\\'"
  :init
  (setq plantuml-default-exec-mode 'executable))
#+end_src

** python
#+begin_src emacs-lisp :tangle no
  (setup python-ts-mode
         (:file-match "\\.py\\'")
         (:hook indent-bars-mode)
         )

  (setup lazy-ruff
      (:load-after org-roam)
         (:package lazy-ruff)
  )


  (setup pet
         (:package pet)
         (:hook-into python-base-mode-hook))
#+end_src

*** Packages
**** python-test
#+begin_src emacs-lisp :tangle no
(setup python-test

  :ensure t
  :bind
  (:map python-ts-mode-map
        ("C-. t a" . python-test-project)
        ("C-. t f" . python-test-file)
        ("C-. t t" . python-test-function))
  :init
  (setq python-test-backend 'pytest)
  :config
  (setq python-test-project-root-files
        (append '("README.md") python-test-project-root-files)))
#+end_src

** racket
#+begin_src emacs-lisp :tangle no
(use-package racket-mode
  :ensure t
  :mode "\\.rkt[dl]?\\'"
  :bind
  (:map racket-mode-map
        ("M-g k" . racket-doc)
        ("C-. t" . racket-test))
  :config
  (with-eval-after-load 'repl-toggle
    (cl-pushnew '(racket-mode . racket-repl) rtog/mode-repl-alist :test #'equal)))
#+end_src

*** Packages
**** flymake-racket
#+begin_src emacs-lisp :tangle no
(use-package flymake-racket
  :ensure t
  :hook
  (racket-mode-hook . flymake-racket-add-hook))
#+end_src

** rego
Disabled due to currently not working with rego.
#+begin_src emacs-lisp :tangle no
(use-package rego-mode :ensure t)
#+end_src

** rst
#+begin_src emacs-lisp :tangle no
(use-package rst
  :hook
  (rst-mode-hook . auto-fill-mode))
#+end_src

*** Appearance
**** Variable pitch
Use variable-pitch font but still make sure everything aligns.
#+begin_src emacs-lisp :tangle no
(font-lock-add-keywords
 'rst-mode
 '(("^[[:space:]-*+]+\\(\\[.\\]\\)?" 0 'fixed-pitch append))
 'append)
#+end_src

**** Bullet lists
Pretty check-boxes as well as bullet lists.
#+begin_src emacs-lisp :tangle no
(font-lock-add-keywords
 'rst-mode
 '(("^ *\\([-*+]\\) "
    (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "⏺"))))
   ("^ *[-*+] \\[\\([Xx]\\)\\] "
    (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "✕"))))))
#+end_src

** ruby
#+begin_src emacs-lisp :tangle no
(use-package ruby-ts-mode
  :mode
  "\\.\\(rbw?\\|ru\\|rake\\|thor\\|jbuilder\\|rabl\\|gemspec\\|podspec\\)\\'"
  "\\(Gem\\|Rake\\|Cap\\|Thor\\|Puppet\\|Berks\\|Brew\\|Vagrant\\|Guard\\|Pod\\)file"
  :hook
  (ruby-ts-mode-hook . eglot-ensure)
  :init
  (setq ruby-align-chained-calls t)

  (with-eval-after-load 'apheleia
    (cl-pushnew '(ruby-ts-mode . rufo) apheleia-mode-alist :test #'equal))

  (cl-pushnew '("\\([^/]+\\)\\.rb\\'" "\\1_test.rb") find-sibling-rules :test #'equal)
  (cl-pushnew '("\\([^/]+\\)_test\\.rb\\'" "\\1.rb") find-sibling-rules :test #'equal)
  :config
  (with-eval-after-load 'hideshow
    (cl-pushnew `(ruby-ts-mode
                  ,(rx (or "def" "class" "module" "do" "{" "[")) ; Block start
                  ,(rx (or "}" "]" "end"))                       ; Block end
                  ,(rx bol
                       (or (+ (zero-or-more blank) "#") "=begin")) ; Comment start
                  ruby-forward-sexp nil)
                hs-special-modes-alist
                :test #'equal)))
#+end_src

*** Packages
**** inf-ruby
#+begin_src emacs-lisp :tangle no
(use-package inf-ruby
  :ensure t
  :hook
  (ruby-ts-mode-hook . inf-ruby-minor-mode)
  ;; Auto breakpoint
  (compilation-filter-hook . inf-ruby-auto-enter)
  :init
  (setq inf-ruby-default-implementation "pry")

  (with-eval-after-load 'repl-toggle
    (cl-pushnew '(ruby-ts-mode . inf-ruby) rtog/mode-repl-alist :test #'equal)))
#+end_src

**** minitest
#+begin_src emacs-lisp :tangle no
(use-package minitest
  :ensure t
  :hook
  (ruby-ts-mode-hook . minitest-enable-appropriate-mode)
  :bind
  (:map minitest-mode-map
        ("C-. t a" . minitest-verify-all)
        ("C-. t f" . minitest-verify)
        ("C-. t t" . minitest-verify-single))
  :init
  (put 'minitest-use-bundler 'safe-local-variable 'booleanp))
#+end_src

** rust
#+begin_src emacs-lisp :tangle no
(use-package rust-ts-mode
  :mode "\\.rs\\'"
  :hook
  (rust-ts-mode-hook . eglot-ensure)
  :init
  (with-eval-after-load 'org
    (cl-pushnew '("rust" . rust-ts-mode) org-src-lang-modes :test #'equal)))
#+end_src

** scala
#+begin_src emacs-lisp
(setup scala-mode
       (:package scala-mode)
       (:file-match "\\.\\(scala\\|sbt\\)\\'"))
#+end_src

** sh
#+begin_src emacs-lisp
(setup sh-script
       (  :hook
          flymake-mode)
       (:set
        ;; Use regular indentation for line-continuation
        sh-indent-after-continuation 'always)
)
#+end_src

*** Packages
** sql
#+begin_src emacs-lisp
(setup sql
  (:set sql-mysql-options '("--protocol=tcp" "--prompt=" "--disable-pager")))
#+end_src

** terraform
#+begin_src emacs-lisp :tangle no
(use-package terraform-mode
  :ensure t
  :mode "\\.tf$"
  :hook
  (terraform-mode-hook . terraform-mode-set-devdocs)
  :config
  (defun terraform-mode-set-devdocs ()
    (setq-local devdocs-current-docs '("terraform"))))
#+end_src

** typescript
#+begin_src emacs-lisp :tangle no
(use-package typescript-ts-mode
  :mode "\\.ts$"
  :hook
  (typescript-ts-mode-hook . eglot-ensure)
  :init
  (cl-pushnew '("\\([^/]+\\)\\.ts\\'" "\\1.test.ts") find-sibling-rules :test #'equal)
  (cl-pushnew '("\\([^/]+\\).test\\.ts\\'" "\\1.ts") find-sibling-rules :test #'equal))
#+end_src

** web
*** Packages
**** cakecrumbs
Display current path for HTML/XML/CSS.
#+begin_src emacs-lisp :tangle no
(use-package cakecrumbs
  :ensure t
  :defer 3
  :commands
  (cakecrumbs-auto-setup)
  :config
  (cakecrumbs-auto-setup))
#+end_src

**** web-mode
#+begin_src emacs-lisp :tangle no
(use-package web-mode
  :ensure t
  :mode "\\.\\(phtml\\|php\\|[agj]sp\\|as[cp]x\\|erb\\|djhtml\\|html?\\|hbs\\|ejs\\|jade\\|swig\\|tmpl\\)\\'"
  :init
  (setq web-mode-enable-html-entities-fontification t)
  ;; Highlight enclosing tags of the element under cursor
  (setq web-mode-enable-current-element-highlight t)
  ;; No extra indentation for blocks.
  (setq web-mode-script-padding 0)
  (setq web-mode-style-padding 0))
#+end_src

** yaml
#+begin_src emacs-lisp
(setup yaml-ts-mode
  (:file-match "\\.\\(e?ya?\\|ra\\)ml\\'")
  (:hook indent-bars-mode)
  )
#+end_src

* Tools
** Indentation guides
#+begin_src emacs-lisp
(setup indent-bars
       (:package indent-bars)
       (:set indent-bars-width-frac 0.2))
#+end_src

** Terminal
*** eat
#+begin_src emacs-lisp
(setup eat
       (:package eat))
#+end_src

** Check

#+begin_src emacs-lisp
(setup jinx
(:package jinx))
#+end_src
